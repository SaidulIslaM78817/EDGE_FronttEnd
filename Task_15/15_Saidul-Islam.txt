An interface in TypeScript is a way to define a structure or contract for objects, ensuring they have specific properties and methods. Interfaces provide type-checking at compile-time and help in creating consistent, reusable, and maintainable code.

Key Features:
Defines the shape of an object.
Can include properties and methods.
Supports optional and readonly properties.
Can be extended using inheritance.


// Define an interface
interface User {
    id: number;
    name: string;
    email: string;
    isActive: boolean;
    greet(): string; // Method inside the interface
}

// A function that uses the User interface
const displayUserInfo = (user: User): void => {
    console.log(`ID: ${user.id}`);
    console.log(`Name: ${user.name}`);
    console.log(`Email: ${user.email}`);
    console.log(`Active: ${user.isActive ? "Yes" : "No"}`);
    console.log(user.greet());
};

// Create an object that adheres to the User interface
const user1: User = {
    id: 1,
    name: "John Doe",
    email: "john.doe@example.com",
    isActive: true,
    greet() {
        return `Hello, my name is ${this.name}.`;
    },
};

// Use the function
displayUserInfo(user1);

